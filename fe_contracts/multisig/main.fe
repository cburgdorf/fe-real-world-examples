use std::evm::call_data_load
use raw_call::{RawCallHelper, MemoryEncoding}

const MAX_OWNER_COUNT: u8 = 50
const TX_MAX_DATA_SIZE: u256 = 128

type TransactionData = Array<u8, { TX_MAX_DATA_SIZE }>

struct Confirmation {
    #indexed
    pub owner: address
    #indexed
    pub tx_id: u256
}

struct Transaction {
    pub destination: address 
    pub value: u256 
    pub data: TransactionData
    pub data_length: u16
    pub executed: bool
}

impl MemoryEncoding for Transaction {
    fn write_mem(self) {
      // Very hacky way to copy the data into a fresh segment of memory
      // In the future, the compiler would likely optimize that away
      let mut x: TransactionData = self.data
    }
    fn byte_count(self) -> u16 {
        return self.data_length
    }
}

contract MultiSig {

  tx_count: u256
  transactions: Map<u256, Transaction>
  confirmations: Map<u256, Map<address, bool>>
  required_confirmations: u8
  owners: Array<address, { MAX_OWNER_COUNT }>

  pub fn __init__(mut self, owners: Array<address, { MAX_OWNER_COUNT }>, required_confirmations: u8) {
    // Hardcoding a single owner for now
    self.owners = owners
    self.required_confirmations = required_confirmations
  }

  fn validate_not_executed(self, tx_id: u256) {
    if self.transactions[tx_id].executed {
      revert
    }
  }

  /// Returns the confirmation status of a transaction.
  pub fn is_confirmed(self, tx_id: u256) -> bool {
    let mut count: u8 = 0
    for owner in self.owners.to_mem() {
      if self.confirmations[tx_id][owner] {
        count += 1
      }
      if count == self.required_confirmations {
        return true
      }
    }
    return false
  }

  // TODO: Add checks
  fn add_transaction(mut self, destination: address, value: u256, data: TransactionData, data_length: u16) -> u256{
    let tx_id: u256 = self.tx_count
    self.transactions[tx_id] = Transaction (
      destination,
      value,
      data,
      data_length,
      executed: false
    )
    self.tx_count += 1
    return tx_id
  }

  // Allows an owner to submit and confirm a transaction.
  pub fn submit_transaction(mut self, mut ctx: Context, destination: address, value: u256, data: TransactionData, data_length: u16) -> u256{
    let tx_id: u256 = self.add_transaction(destination, value, data, data_length)
    self.confirm_transaction(ctx, tx_id)
    return tx_id
  }

  /// Allows an owner to confirm a transaction
  pub fn confirm_transaction(mut self, mut ctx: Context, tx_id: u256) {
    //TODO: add checks
    self.confirmations[tx_id][ctx.msg_sender()] = true
    ctx.emit(Confirmation(owner: ctx.msg_sender(), tx_id))
    self.execute_transaction(tx_id)
  }


  // TODO: Add validations
  pub fn execute_transaction(mut self, tx_id: u256) {
    self.validate_not_executed(tx_id);
    if self.is_confirmed(tx_id) {
      let mut tx: Transaction = self.transactions[tx_id].to_mem()
      self.transactions[tx_id].executed = true
      // TODO: Handle failure
      RawCallHelper::call(tx.destination, tx.value, tx)
    }
  }
}