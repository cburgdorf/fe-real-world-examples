
/// Trait used to write data to memory and get the byte count of the data
pub trait MemoryEncoding {
    fn write_mem(self);
    fn byte_count(self) -> u16;
}

/// Helper to perform contract calls which aren't natively supported in current Fe.
/// This is currently needed when calling functions on solidity contracts that contain
/// data types that are not supported in Fe such as `uint24`.
pub struct RawCallHelper {

    /// Get the next available memory location
    pub unsafe fn avail() -> u256 {
        let mut ptr: u256 = std::evm::mload(offset: 64)
        if ptr == 0x00 {
            ptr = 96
        }
        return ptr
    }

    /// Call a function directly by its selector on the given address. 
    pub fn call<T: MemoryEncoding>(_ addr: address, _ selector: u32, data: T) -> RawCallResult{
        let mut start: u256
        unsafe {
            let input_offset: u256 = RawCallHelper::avail()
            [selector]
            data.write_mem()
            start = RawCallHelper::avail() + data.byte_count()
            let success: u256 = std::evm::call(
                gas: std::evm::gas_remaining(),
                addr,
                value: 0,
                input_offset,
                input_len: 4 + data.byte_count(),
                output_offset: start,
                output_len: 32
            )
            if success == 0 {
                revert
            }
        }

        return RawCallResult(start)
    }
}

/// Result of raw call. Provides conversions to common types. Custom return types
/// can be implemented by interpreting the raw memory directly
pub struct RawCallResult {
    pub start: u256
    /// Convert the raw call result to a u256
    pub fn to_u256(self) -> u256 {
        unsafe {
            let output_size: u256 = std::evm::return_data_size()
            if output_size < 32 {
                revert
            }
            return std::evm::mload(offset: self.start)
        }
    }
}



